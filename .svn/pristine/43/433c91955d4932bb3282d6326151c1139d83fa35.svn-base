using CdplATS.Entity.Models;
using CdplATS.UI.Helpers;
using Microsoft.AspNetCore.Mvc;

namespace CdplATS.UI.Controllers
{
    public class EmployeeController : AuthController
    {
        private readonly WebApiHelper _webApiHelper;

        private readonly ApiHelper _apiHelper = new ApiHelper();

        public EmployeeController(WebApiHelper webApiHelper)
        {
            _webApiHelper = webApiHelper;
        }

        //  employee index view 
        public async Task<IActionResult> Index()
        {
            // Prevent caching
            Response.Headers["Cache-Control"] = "no-cache, no-store, must-revalidate";
            Response.Headers["Pragma"] = "no-cache";
            Response.Headers["Expires"] = "0";

            var department = await _webApiHelper.GetAsync<List<DepartmentList>>(_apiHelper.BindDepartmentListApi);

            EmployeeEntity employee = new EmployeeEntity
            {
                Departments = department.Data
            };

            return View(employee);
        }

        //get employee
        public async Task<IActionResult> GetEmployeeList(int? DepartmentId,int? ActiveStatus)
        {
            var employees = await _webApiHelper.GetAsync<List<EmployeeEntity>>(_apiHelper.GetEmployeeListApi + $"?DepartmentId={DepartmentId}&ActiveStatus={ActiveStatus}");
            return Json(employees.Data);
        }


        [HttpGet]
        public async Task<IActionResult> GetEmployeeDetails(int Id)
        {
            var department = await _webApiHelper.GetAsync<List<DepartmentList>>(_apiHelper.BindDepartmentListApi);

            var filteredDepartments = department.Data.Where(d => d.DepartmentId != Id).ToList();


            var role = await _webApiHelper.GetAsync<List<EmployeeRole>>(_apiHelper.BindRoleListApi);
            var reviewer = await _webApiHelper.GetAsync<List<Reviewer>>(_apiHelper.BindReviewerListApi);


            EmployeeEntity employee = new EmployeeEntity
            {
                RoleList = role.Data,
                Departments = filteredDepartments,
                Reviewers = reviewer.Data
            };
            if (Id != 0)
            {
                var employees = await _webApiHelper.GetAsync<EmployeeEntity>(_apiHelper.GetEmployeeDetailsApi + $"?Id={Id}");
                employee = employees.Data;
                employee.RoleList = role.Data;
                employee.Departments = filteredDepartments;
                employee.Reviewers = reviewer.Data;
            }


            return PartialView("/Views/Employee/AddEditEmployee.cshtml",employee);
        }

        //add edit employee method(post) 
        [HttpPost]
        public async Task<IActionResult> AddEditEmployee(EmployeeEntity request)
        {
            var LoggedEmpCode = HttpContext.Session.GetInt32("authCode");
            request.authCode = LoggedEmpCode;
            if (request == null)
            {
                return BadRequest("Invalid Data");
            }

            if (ModelState.IsValid)
            {
                var response = await _webApiHelper.PostAsync<EmployeeEntity>(_apiHelper.AddEditEmployeeApi, request);

                if (response == null)
                {
                    return StatusCode(500, "Error adding/editing employee.");
                }
                return Json(response);
            } 
            return BadRequest("Model validation failed.");
        }

        //delete employee method
        [HttpDelete("Employee/DeleteEmployee/{Id}/{status}")]
        public async Task<IActionResult> DeleteEmployee(int Id,int status)
        {
         
            var result = await _webApiHelper.DeleteAsync<bool>(_apiHelper.DeleteEmployeeApi+$"{Id}/{status}");

            if (result == null || !result.Success)
            {
                return StatusCode(500, "Error deleting employee.");
            }
            return Json(result);
        }

        //add edit employee method(get)
        [HttpGet]
        public async Task<IActionResult> AddEditEmployeeAssessment(int empCode)
        {
            var LoggedEmpCode = HttpContext.Session.GetInt32("authCode");
            EmployeeAssessmentEntity employeeAssessmentEntity = new EmployeeAssessmentEntity();
            var employee = await _webApiHelper.GetAsync<List<EmployeeEntity>>(_apiHelper.BindEmployeeList + $"{LoggedEmpCode}");
            ViewBag.EmployeeList = employee.Data;


            var employeeAssessment = await _webApiHelper.GetAsync<EmployeeAssessmentEntity>(_apiHelper.GetEmpAssByEmpCodeApi + $"{empCode}");
            employeeAssessmentEntity = employeeAssessment.Data;

            return PartialView("/Views/Employee/AddEditEmployeeAssessment.cshtml", employeeAssessmentEntity);
        }

        //add edit employee method(post) 
        [HttpPost]
        public async Task<IActionResult> AddEditEmployeeAssessment(EmployeeEntity request)
        {
            var LoggedEmpCode = HttpContext.Session.GetInt32("authCode");
            request.authCode = LoggedEmpCode;
            if (request == null)
            {
                return BadRequest("Invalid Data");
            }

            if (ModelState.IsValid)
            {
                var response = await _webApiHelper.PostAsync<EmployeeEntity>(_apiHelper.AddEditEmployeeApi, request);

                if (response == null)
                {
                    return StatusCode(500, "Error adding/editing employee.");
                }
                return Json(response);
            }
            return BadRequest("Model validation failed.");
        }
    }
}
