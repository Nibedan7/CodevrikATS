using CdplATS.Entity.Models;
using CdplATS.UI.Helpers;
using DocumentFormat.OpenXml.Spreadsheet;
using Microsoft.AspNetCore.Mvc;

namespace CdplATS.UI.Controllers
{
    public class ClientController : Controller
    {
        private readonly WebApiHelper _webApiHelper;
        private readonly ApiHelper _apiHelper = new ApiHelper();

        public ClientController(WebApiHelper webApiHelper)
        {
            _webApiHelper = webApiHelper;
        }

        public  IActionResult Index()
        {
            return View();
        }

        [HttpGet]
        public async Task<IActionResult> GetClientList()
        {

            var ClientList = await _webApiHelper.GetAsync<List<ClientEntity>>(_apiHelper.GetClient);

            return Json(ClientList.Data);
        }

        [HttpGet]
        public async Task<IActionResult> GetClientDetails(int Id)
        {

            if(Id == 0)
            {

                ClientEntity client = new ClientEntity
                {
                 
                };
                return PartialView("/Views/Client/AddEditClient.cshtml", client);
            }

            var Client = await _webApiHelper.GetAsync<ClientEntity>(_apiHelper.GetClientDetails + $"?Id={Id}");

            return PartialView("/Views/Client/AddEditClient.cshtml", Client.Data);
        }

        [HttpPost]
        public async Task<IActionResult> AddEditClient(ClientEntity request)
        {
            
            if (ModelState.IsValid)
            {
                var response = await _webApiHelper.PostAsync<ClientEntity>(_apiHelper.AddEditClientApi, request);

                if (response == null)
                {
                    return StatusCode(500, "Error adding/editing client.");
                }
                return Json(response);
            }
            return BadRequest("Model validation failed.");
        }
        [HttpDelete]
        public async Task<IActionResult> DeleteClient(int Id)
        {
            if (Id <= 0)
            {
                return BadRequest("Invalid Client Id");
            }
            var response = await _webApiHelper.DeleteAsync<bool>(_apiHelper.DeleteClientApi + $"{Id}");

            if (response == null || !response.Success)
            {
                return Json(response?.Message);
            }
            return Json(response.Message);
        }

    }
}
