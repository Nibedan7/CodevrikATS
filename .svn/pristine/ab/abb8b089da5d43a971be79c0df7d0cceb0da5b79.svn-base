using System.Reflection.Emit;
using System.Text;
using CdplATS.Entity.Models;
using CdplATS.UI.Helpers;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;

namespace CdplATS.UI.Controllers
{
    public class AccountController : Controller
    {
        private readonly WebApiHelper _webApiHelper;
        private readonly ApiHelper _apiHelper = new ApiHelper();
        private readonly HttpClient _httpClient;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly CommonService _common;

        public AccountController(WebApiHelper webApiHelper, IHttpContextAccessor httpContextAccessor, CommonService common)
        {
            _webApiHelper = webApiHelper;
            _httpContextAccessor = httpContextAccessor;
            _common = common;
        }
        public IActionResult Index()
        {
            return View("Login");
        }

        [HttpPost]
        public async Task<IActionResult> Login(LoginEntity model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }
            var response = await _webApiHelper.PostUnAuthorizedAsync<dynamic>(_apiHelper.LoginApi, model);          
            if (response.Success)
            {
                return RedirectToAction("Index", "Leave");
            }
            else
            {
                ViewBag.ErrorMessage = response.Message;
            }
            return View();

        }
        public IActionResult Logout()
        {
            _httpContextAccessor.HttpContext.Session.Clear();

            return RedirectToAction("Index", "Account");
        }

        [HttpPost]
        public async Task<IActionResult> ForgotPassword(string EncodedUserCode)
        {
            string EncUserCode = EncodedUserCode;

            // Decode Base64
            string decodedUsercode = Encoding.UTF8.GetString(Convert.FromBase64String(EncodedUserCode));
            int employeeCode = int.Parse(decodedUsercode);

            var apiResponse = await _webApiHelper.GetAsync<List<EmailEntity>>(_apiHelper.SendEmailApi + $"?EmployeeCode={employeeCode}&EncUserCode={EncUserCode}");

            var emailEntity = new EmailEntity
            {
               
                Email = apiResponse.Data[0].Email,
                Subject = apiResponse.Data[0].Subject,
                Body = apiResponse.Data[0].Body
            };

            bool emailResult = await _common.SendEmail(emailEntity);

            if (emailResult)
                return Json(new { success = true, message = "Email sent successfully." });
            else
                return Json(new { success = false, message = "Failed to send email." });

        }
    }
 }
