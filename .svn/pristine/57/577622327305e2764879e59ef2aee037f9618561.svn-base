using System.Drawing.Text;
using System.Text.Json;
using CdplATS.Entity.Models;
using CdplATS.UI.Helpers;
using Microsoft.AspNetCore.Mvc;

var builder = WebApplication.CreateBuilder(args);


//builder.Services.AddHttpContextAccessor();
builder.Services.AddHttpContextAccessor(); // Required for accessing HttpContext
builder.Services.AddDistributedMemoryCache(); // Required for session
builder.Services.AddSession(options =>
{
    options.IdleTimeout = TimeSpan.FromMinutes(60); // Set session timeout
    options.Cookie.HttpOnly = true;
    options.Cookie.IsEssential = true;
    options.Cookie.SameSite = SameSiteMode.Strict;
});

// Add services to the container.
builder.Services.AddControllersWithViews(options =>
{
    options.Filters.Add(new AutoValidateAntiforgeryTokenAttribute());
});

builder.Services.AddHttpClient(); // Add HttpClient factory
builder.Services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();
builder.Services.AddScoped<WebApiHelper>(); // Register WebApiHelper
builder.Services.AddScoped<CommonService>();
builder.Services.AddHostedService<DailyEmailSenderService>();


builder.Services.Configure<EmailConfig>(builder.Configuration.GetSection("EmailConfig"));

// Configure anti-forgery
builder.Services.AddAntiforgery(options =>
{
    options.HeaderName = "RequestVerificationToken";
    options.Cookie.SecurePolicy = CookieSecurePolicy.Always;
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

// Security headers
app.Use(async (context, next) =>
{
    context.Response.Headers.Append("X-Content-Type-Options", "nosniff");
    context.Response.Headers.Append("X-Frame-Options", "DENY");
    context.Response.Headers.Append("X-XSS-Protection", "1; mode=block");
    await next();
});

app.UseSession(); // Enable session before authentication & authorization
app.UseMiddleware<JwtRedirectMiddleware>();

app.UseAuthentication();
app.UseAuthorization();

// Custom middleware to bypass auth for specific routes
app.Use(async (context, next) =>
{
    if (context.Request.Path.StartsWithSegments("/Account/ForgotPassword"))
    {
        await next();
        return;
    }
    await next();
});

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Account}/{action=Index}/{id?}");

//app.UseSession(); // Enable session before authentication & authorization
//app.UseMiddleware<JwtRedirectMiddleware>();
//app.UseAuthentication();
//app.UseAuthorization();


app.Run();
