@model CdplATS.Entity.Models.AdminChartEntity

@using Newtonsoft.Json
@{
    ViewBag.Title = "Work Hours Chart";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int selectedYear = DateTime.Now.Year;
    int selectedMonth = DateTime.Now.Month;
}
<style>
    body {
        /* background-color: #f3f8ff; */
    }

    .shadow: {
        border-radius: 15px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        background-color: white;
    }
</style>


<div class="d-flex align-items-center filterBar gap-4 flex-wrap w-100 position-fixed">

    <div class="d-flex gap-2 align-items-center">
        <label class="standardColor mb-0" style="width:max-content;">Year:</label>

        @Html.DropDownListFor(
                 Model => Model.CurrentYear,
                 new SelectList(Model.Year, Model.CurrentYear),
                 new { @class = "form-select h-25", id = "year", onchange = "onYearChange()" }
                 )

    </div>


    <div class="d-flex gap-2 align-items-center">
        <label class="standardColor mb-0" style="width:max-content;">Month:</label>
        <select id="month" name="month" class="form-select" onchange="onMonthChange()">
            <!-- jquery -->
        </select>
    </div>
</div>

<div id="legend-tooltip"
     style="display:none; background: rgba(0,0,0,0.7); color: white; padding: 5px 10px; border-radius: 4px; pointer-events:none; font-size:12px; position:absolute; z-index:1000;">
</div>


<div class="d-flex gap-3" style="margin-top:100px">
    <div style="height: 600px; width:50%; border-radius:15px" class="shadow">
        <canvas id="workHoursChart" style="width: 50%; height: 100%; border-radius:15px; background-color: white;"
                class="shadow"></canvas>
    </div>

    <div style="height: 600px; width:50%; border-radius:15px" class="shadow">
        <canvas id="AvgworkHoursChart" style="width: 100%; height: 100%; border-radius:15px; background-color: white;"
                class="shadow"></canvas>
    </div>
</div>

<div class="d-flex gap-3 my-5">
    <div style="height: 600px; width:50%; border-radius:15px" class="shadow">
        <canvas id="empPuncuality" style="width: 100%; height: 100%; border-radius:15px; background-color: white;"
                class="shadow"></canvas>
    </div>
    <div style="height: 600px; width:50%; border-radius:15px" class="shadow">
        <canvas id="empAnnualLeave" style="width: 100%; height: 100%; border-radius:15px; background-color: white;"
                class="shadow"></canvas>
    </div>
</div>

<div class=" mb-5">
    <div style="height: 600px; width:100%; border-radius:15px" class="shadow">
        <canvas id="hybridWorkbalance" style="width: 100%; height: 100%; border-radius:15px; background-color: white;"
                class="shadow"></canvas>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.4.0/dist/chartjs-plugin-annotation.min.js"></script>


<script>
    $(document).ready(function () {
        bindMonthDropDown();
        fetchAndRenderTotalWorkHourChart();
        fetchAndRenderAvgWorkHourChart();
        fetchAndRenderEmpPuncuality();
        fetchAndRenderEmpLeaveSummary();
        fetchAndRenderHybridWorkBalance();
    })


    function onYearChange() {
        bindMonthDropDown();
        fetchAndRenderTotalWorkHourChart();
        fetchAndRenderAvgWorkHourChart();
        fetchAndRenderEmpPuncuality();
        fetchAndRenderEmpLeaveSummary();
        fetchAndRenderHybridWorkBalance();
    }

    function onMonthChange() {
        fetchAndRenderTotalWorkHourChart();
        fetchAndRenderAvgWorkHourChart();
        fetchAndRenderEmpPuncuality();
        fetchAndRenderHybridWorkBalance();
    }

    function bindMonthDropDown() {
        const selectedYear = parseInt($('#year').val());
        const $month = $('#month');

        const currentYear = new Date().getFullYear();
        const currentMonth = new Date().getMonth() + 1;
        const selectedMonth = @selectedMonth;
        $month.empty();

        $month.append(`<option value="0">--All Months--</option>`);

        const maxMonth = (selectedYear === currentYear) ? currentMonth : 12;

        for (let m = 1; m <= maxMonth; m++) {
            const monthName = new Date(0, m - 1).toLocaleString('default', { month: 'long' });


            const isSelected = (selectedYear === currentYear && m === currentMonth) ? 'selected' : '';
            $month.append(`<option value="${m}" ${isSelected}>${monthName}</option>`);
        }
    }



    // Function to fetch data and update chart
    function fetchAndRenderTotalWorkHourChart() {

        const year = document.getElementById('year').value;
        const month = document.getElementById('month').value;

        $.ajax({
            url: `/AdminChart/GetTotalWorkHourPerEmployee`,
            method: "GET",
            data: { year: year, month: month },
            success: function (data) {
                if (!data || data.length === 0) {
                    alert("No data found for selected year and month.");
                    return;
                }

                renderChart(data);
            },
            error: function (xhr, status, error) {
                console.error("Error fetching chart data:", error);
                alert("Failed to load chart data.");
            }
        });

    }

    let TotalWorkHourCahrtContainer = null;

    // Function to render the chart
    function renderChart(chartData) {
        const ctx = document.getElementById('workHoursChart').getContext('2d');

        // remove existing chart
        if (TotalWorkHourCahrtContainer) {
            TotalWorkHourCahrtContainer.destroy();
        }

        const labels = chartData.map(item => item.employeeName);
        const workDone = chartData.map(item => item.workDone);
        const totalHours = chartData.map(item => item.totalWorkingHours);
        const actualHours = chartData.map(item => item.actualWorkingHour);

        const backgroundColor = chartData.map(item => {
            const diff = item.actualWorkingHour - item.workDone;
            if (diff <= 10) return 'rgba(46, 202, 87, 0.60)';   // green
            if (diff <= 15) return 'rgba(255, 159, 64, 0.60)';   // orange
            return 'rgba(238, 49, 36, 0.60)';                   // red
        });

        const borderColor = backgroundColor.map(c => c.replace('0.6', '0.8'));

        TotalWorkHourCahrtContainer = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Work Done (Hours)',
                        data: workDone,
                        backgroundColor: backgroundColor,
                        hoverBackgroundColor: borderColor,



                    },
                    {
                        type: 'line',
                        label: 'Total Working Hour',
                        data: totalHours,
                        borderColor: 'rgb(91, 194, 231)', // Blue
                        borderWidth: 1,
                        pointRadius: 0,
                        fill: false,
                        order: -1
                    },
                    {
                        type: 'line',
                        label: 'Expected Working Hour',
                        data: actualHours,
                        borderColor: 'rgb(0, 48, 73)',
                        borderWidth: 1,
                        pointRadius: 2,
                        fill: false,
                        order: -2
                    }]

            },
            options: {
                //indexAxis: 'y',
                interaction: {
                    intersect: false,
                    mode: 'index',
                },
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Total Work Hours',
                        font: {
                            size: 20,
                            weight: 'bold'
                        }
                    },
                    legend: {
                        display: true,
                        labels: {
                            usePointStyle: true,
                            generateLabels: function (chart) {
                                return [
                                    {
                                        text: 'Efficient',
                                        fillStyle: 'rgba(46, 202, 87, 0.60)',
                                        strokeStyle: 'rgba(46, 202, 87, 0.80)',
                                        lineWidth: 1,
                                        hidden: false,
                                        index: 0,
                                        description: 'Difference between expected working hours and work done is less than 10 hours, indicating efficient time management. ',
                                        pointStyle: 'rectRounded',
                                    },
                                    {
                                        text: 'Moderate',
                                        fillStyle: 'rgba(255, 159, 64, 0.60)',
                                        strokeStyle: 'rgba(255, 159, 64, 0.80)',
                                        lineWidth: 1,
                                        hidden: false,
                                        index: 1,
                                        description: 'Difference between expected working hours and work done is between 10 and 15 hours, showing moderate deviation.',
                                        pointStyle: 'rectRounded',
                                    },
                                    {
                                        text: 'Critical',
                                        fillStyle: 'rgba(238, 49, 36, 0.60)',
                                        strokeStyle: 'rgba(238, 49, 36, 0.80)',
                                        lineWidth: 1,
                                        hidden: false,
                                        index: 2,
                                        description: 'Difference between expected working hours and work done is over 15 hours, indicating a significant discrepancy.',
                                        pointStyle: 'rectRounded',
                                    },
                                    {
                                        text: 'Total Working Hour',
                                        fillStyle: 'rgb(91, 194, 231)',
                                        strokeStyle: 'rgb(91, 194, 231)',
                                        lineWidth: 1,
                                        hidden: false,
                                        index: 2,
                                        pointStyle: 'line',
                                    },
                                    {
                                        text: 'Expected Working Hour',
                                        fillStyle: 'rgb(0, 48, 73)',
                                        strokeStyle: 'rgb(0, 48, 73)',
                                        lineWidth: 1,
                                        hidden: false,
                                        index: 2,
                                        pointStyle: 'line',
                                    }
                                ];
                            }
                        },
                        onClick: null,
                            onHover: function (event, legendItem, legend) {
                            const tooltipEl = document.getElementById('legend-tooltip');
                            if (tooltipEl && legendItem) {
                                const canvasRect = legend.chart.canvas.getBoundingClientRect();

                                tooltipEl.innerText = legendItem.description || legendItem.text;
                                tooltipEl.style.display = 'block';

                                // Calculate correct position: canvas position on page + mouse offset in canvas
                                const x = canvasRect.left + event.native.offsetX + window.scrollX;
                                const y = canvasRect.top + event.native.offsetY + window.scrollY;

                                tooltipEl.style.left = x + 10 + 'px';
                                tooltipEl.style.top = y + 10 + 'px';
                            }
                        },

                        onLeave: function (event, legendItem, legend) {
                            const tooltipEl = document.getElementById('legend-tooltip');
                            if (tooltipEl) {
                                tooltipEl.style.display = 'none';
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        beginAtZero: true,
                        title: {
                            display: false,
                            text: 'Employees',
                            font: { size: 16 }
                        },

                        grid: {
                            display: false
                        }
                    },
                    y: {
                        ticks: {
                            autoSkip: false,
                            font: { size: 13 }
                        },
                        title: {
                            display: true,
                            text: 'Total Hours',
                            font: {
                                size: 15,
                                weight: 'bold'
                            }
                        },

                    }
                }
            }
        });
    }

    // Chart 2(AvgWokrHour)==========================================================================================================================

    // Fetch and render Avg Work Hour chart
    function fetchAndRenderAvgWorkHourChart() {
        debugger;
        const year = document.getElementById('year').value;
        const month = document.getElementById('month').value;

        $.ajax({
            url: `/AdminChart/GetMonthlyAvgWorkHoursPerDay`,
            method: "GET",
            data: { year: year, month: month },
            success: function (data) {

                if (!data || data.length === 0) {
                    alert("No data found for selected year and month.");
                    return;
                }

                renderAvgChart(data);
            },

            error: function (xhr, status, error) {
                console.error("Error fetching avg work hour chart data:", error);
                alert("Failed to load avg work hour chart.");
            }
        });
    }

    let AvgWorkHourChartContainer = null;

    function renderAvgChart(chartData) {
        const ctx = document.getElementById('AvgworkHoursChart').getContext('2d');

        if (AvgWorkHourChartContainer) {
            AvgWorkHourChartContainer.destroy();
        }

        const labels = chartData.map(item => item.employeeName);
        const averageHoursPerDay = chartData.map(item => item.averageHoursPerDay);


        const ActualAvgWorkHour = 8;

        const backgroundColor = chartData.map(item => {
            const diff = ActualAvgWorkHour - item.averageHoursPerDay;
            if (diff <= 0.5) return 'rgba(46, 202, 87, 0.60)';   // green
            if (diff <= 1.0) return 'rgba(255, 159, 64, 0.60)';   // orange
            return 'rgba(238, 49, 36, 0.60)';                    // red
        });

        const borderColor = backgroundColor.map(c => c.replace('0.6', '1'));

        // Create chart
        AvgWorkHourChartContainer = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Avg Work Done (Hours)',
                        data: averageHoursPerDay,
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgb(91, 194, 231)',
                        pointBackgroundColor: backgroundColor,
                        pointBorderColor: backgroundColor,
                        borderWidth: 1,
                        pointRadius: 5,
                        pointHoverRadius: 7,
                        fill: false,
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: borderColor
                    }
                ]
            },
            options: {
                interaction: {
                    intersect: false,
                    mode: 'index',
                },
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Average Work Hours',
                        font: {
                            size: 20,
                            weight: 'bold'
                        }
                    },
                    legend: {
                        display: true,
                        labels: {
                            usePointStyle: true,
                            generateLabels: function (chart) {
                                return [
                                    {
                                        text: 'Efficient',
                                        fillStyle: 'rgba(46, 202, 87, 0.60)',
                                        strokeStyle: 'rgba(46, 202, 87, 0.80)',
                                        lineWidth: 1,
                                        hidden: false,
                                        index: 0,
                                        description: 'High efficiency: Average working hours exceed 7.5',
                                        pointStyle: 'circle',
                                    },
                                    {
                                        text: 'Moderate',
                                        fillStyle: 'rgba(255, 159, 64, 0.60)',
                                        strokeStyle: 'rgba(255, 159, 64, 0.80)',
                                        lineWidth: 1,
                                        hidden: false,
                                        index: 1,
                                        description: 'Moderate efficiency: Average working hours between 7 and 7.5',
                                        pointStyle: 'circle',
                                    },
                                    {
                                        text: 'Critical',
                                        fillStyle: 'rgba(238, 49, 36, 0.60)',
                                        strokeStyle: 'rgba(238, 49, 36, 0.80)',
                                        lineWidth: 1,
                                        hidden: false,
                                        index: 2,
                                        description: 'Low efficiency: Average working hours below 7',
                                        pointStyle: 'circle',
                                    },
                                ];
                            }
                        },
                        onClick: null,
                            onHover: function (event, legendItem, legend) {
                            const tooltipEl = document.getElementById('legend-tooltip');
                            if (tooltipEl && legendItem) {
                                const canvasRect = legend.chart.canvas.getBoundingClientRect();

                                tooltipEl.innerText = legendItem.description || legendItem.text;
                                tooltipEl.style.display = 'block';

                                // Calculate correct position: canvas position on page + mouse offset in canvas
                                const x = canvasRect.left + event.native.offsetX + window.scrollX;
                                const y = canvasRect.top + event.native.offsetY + window.scrollY;

                                tooltipEl.style.left = x + 10 + 'px';
                                tooltipEl.style.top = y + 10 + 'px';
                            }
                        },

                        onLeave: function (event, legendItem, legend) {
                            const tooltipEl = document.getElementById('legend-tooltip');
                            if (tooltipEl) {
                                tooltipEl.style.display = 'none';
                            }
                        }

                    },
                    annotation: {
                        annotations: {
                            greenZone: {
                                type: 'box',
                                yMin: 7.5,
                                yMax: 10,
                                backgroundColor: 'rgba(46, 202, 87, 0.20)',
                                borderWidth: 0
                            },
                            orangeZone: {
                                type: 'box',
                                yMin: 7,
                                yMax: 7.5,
                                backgroundColor: 'rgba(255, 159, 64, 0.20)',
                                borderWidth: 0
                            },
                            redZone: {
                                type: 'box',
                                yMin: 0,
                                yMax: 7,
                                backgroundColor: 'rgba(238, 49, 36, 0.20)',
                                borderWidth: 0
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        title: {
                            display: false,
                            text: 'Employees'

                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Hours',
                            font: {
                                size: 15,
                                weight: 'bold'
                            }
                        },
                        ticks: {
                            autoSkip: false
                        },
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });

    }
    // Chart 3(GetEmployeePunctuality)=====================================================================================================================

    // Fetch and render Avg Work Hour chart
    function fetchAndRenderEmpPuncuality() {

        const year = document.getElementById('year').value;
        const month = document.getElementById('month').value;

        $.ajax({
            url: `/AdminChart/GetEmployeePunctuality`,
            method: "GET",
            data: { year: year, month: month },
            success: function (data) {

                if (!data || data.length === 0) {
                    alert("No data found for selected year and month.");
                    return;
                }

                renderEmpPunctualityChart(data);
            },

            error: function (xhr, status, error) {
                console.error("Error fetching avg work hour chart data:", error);
                alert("Failed to load avg work hour chart.");
            }
        });
    }

    let EmpPunctualityCahrtContainer = null;

    function renderEmpPunctualityChart(chartData) {
        const ctx = document.getElementById('empPuncuality').getContext('2d');

        if (EmpPunctualityCahrtContainer) {
            EmpPunctualityCahrtContainer.destroy();
        }

        const labels = chartData.map(item => item.employeeName);
        const onTimePercent = chartData.map(item => item.onTimePercent);
        const ActualOnTimePercent = 100;

        const backgroundColor = chartData.map(item => {
            const diff = ActualOnTimePercent - item.onTimePercent;
            if (diff <= 10) return 'rgba(46, 202, 87, 0.60)';   // green
            if (diff <= 20) return 'rgba(255, 159, 64, 0.60)'   // orange
            return 'rgba(238, 49, 36, 0.60)';                    // red
        });


        const borderColor = backgroundColor.map(c => c.replace('0.6', '0.8'));

        EmpPunctualityCahrtContainer = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'on time percent',
                        data: onTimePercent,
                        backgroundColor: 'rgba(49, 54, 50, 0.20)',
                        borderColor: 'rgb(102, 155, 188)',
                        pointBorderColor: backgroundColor,
                        pointBackgroundColor: borderColor,
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: borderColor,
                        borderWidth: 1,
                        pointRadius: 5,
                        pointHoverRadius: 7,
                        fill: false,

                    }
                ]
            },
            options: {
                //indexAxis: 'y',
                interaction: {
                    intersect: false,
                    mode: 'index',
                },
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Punctuality',
                        font: {
                            size: 20,
                            weight: 'bold'
                        }
                    },
                    legend: {
                        display: true,
                        labels: {
                            usePointStyle: true,
                            generateLabels: function (chart) {
                                return [
                                    {
                                        text: 'Efficient',
                                        fillStyle: 'rgba(46, 202, 87, 0.60)',
                                        strokeStyle: 'rgba(46, 202, 87, 0.80)',
                                        lineWidth: 1,
                                        hidden: false,
                                        index: 0,
                                        description: 'Excellent punctuality: 90% or above attendance on time',
                                        pointStyle: 'circle',
                                    },
                                    {
                                        text: 'Moderate',
                                        fillStyle: 'rgba(255, 159, 64, 0.60)',
                                        strokeStyle: 'rgba(255, 159, 64, 0.80)',
                                        lineWidth: 1,
                                        hidden: false,
                                        index: 1,
                                        description: 'Acceptable punctuality: Between 80% and 90%',
                                        pointStyle: 'circle',
                                    },
                                    {
                                        text: 'Critical',
                                        fillStyle: 'rgba(238, 49, 36, 0.60)',
                                        strokeStyle: 'rgba(238, 49, 36, 0.80)',
                                        lineWidth: 1,
                                        hidden: false,
                                        index: 2,
                                        description: 'Low punctuality: Less than 80% on-time performance',
                                        pointStyle: 'circle',
                                    },
                                ];
                            }

                        },
                        onClick: null,
                            onHover: function (event, legendItem, legend) {
                            const tooltipEl = document.getElementById('legend-tooltip');
                            if (tooltipEl && legendItem) {
                                const canvasRect = legend.chart.canvas.getBoundingClientRect();

                                tooltipEl.innerText = legendItem.description || legendItem.text;
                                tooltipEl.style.display = 'block';

                                // Calculate correct position: canvas position on page + mouse offset in canvas
                                const x = canvasRect.left + event.native.offsetX + window.scrollX;
                                const y = canvasRect.top + event.native.offsetY + window.scrollY;

                                tooltipEl.style.left = x + 10 + 'px';
                                tooltipEl.style.top = y + 10 + 'px';
                            }
                        },

                        onLeave: function (event, legendItem, legend) {
                            const tooltipEl = document.getElementById('legend-tooltip');
                            if (tooltipEl) {
                                tooltipEl.style.display = 'none';
                            }
                        }
                    },
                    annotation: {
                        annotations: {
                            greenZone: {
                                type: 'box',
                                yMin: 90,
                                yMax: 100,
                                backgroundColor: 'rgba(46, 202, 87, 0.20)',
                                borderWidth: 0
                            },
                            orangeZone: {
                                type: 'box',
                                yMin: 80,
                                yMax: 90,
                                backgroundColor: 'rgba(255, 159, 64, 0.20)',
                                borderWidth: 0
                            },
                            redZone: {
                                type: 'box',
                                yMin: 0,
                                yMax: 80,
                                backgroundColor: 'rgba(238, 49, 36, 0.20)',
                                borderWidth: 0
                            }
                        }
                    }
                },
                scales: {
                x: {
                    beginAtZero: true,
                    title: {
                        display: false,
                        text: 'Employees'
                    },
                },
                y: {
                    ticks: {
                        autoSkip: false
                    },
                    title: {
                        display: true,
                        text: 'Percentage (%)',
                        font: {
                            size: 15,
                            weight: 'bold'
                        }
                    },
                    grid: {
                        display: false
                    }
                }
            }
                
            },
            

        });
    }

    // Chart 4(GetAnnualLeaveSummaryByYear)=====================================================================================================================

    // Fetch and render Avg Work Hour chart
    function fetchAndRenderEmpLeaveSummary() {
        debugger;
        const year = document.getElementById('year').value;

        $.ajax({
            url: `/AdminChart/GetAnnualLeaveSummaryByYear`,
            method: "GET",
            data: { year: year },
            success: function (data) {

                if (!data || data.length === 0) {
                    alert("No data found for selected year");
                    return;
                }

                renderEmpLeaveSummaryChart(data);
            },

            error: function (xhr, status, error) {
                console.error("Error fetching avg work hour chart data:", error);
                alert("Failed to load avg work hour chart.");
            }
        });
    }

    let EmpAnnualLeaveCahrtContainer = null;

    function renderEmpLeaveSummaryChart(chartData) {
        const ctx = document.getElementById('empAnnualLeave').getContext('2d');

        if (EmpAnnualLeaveCahrtContainer) {
            EmpAnnualLeaveCahrtContainer.destroy();
        }

        const labels = chartData.map(item => item.employeeName);

        const usedWithinLimit = chartData.map(item =>
            Math.min(item.usedLeave, item.totalAnnualLeave)
        );

        const overLeave = chartData.map(item =>
            Math.max(item.usedLeave - item.totalAnnualLeave, 0)
        );

        const backgroundColorUsed = chartData.map(({ usedLeave, totalAnnualLeave }) => {
            const diff = totalAnnualLeave - usedLeave;

            if (diff <= 0) return 'rgba(238, 49, 36, 0.60)';    // Red
            return 'rgba(46, 202, 87, 0.60)';                  // Green
        });


        const hoverColorUsed = backgroundColorUsed.map(c => c.replace('0.60', '0.8'));

        EmpAnnualLeaveCahrtContainer = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Used Leave (Within Limit)',
                        data: usedWithinLimit,
                        backgroundColor: backgroundColorUsed,
                        hoverBackgroundColor: hoverColorUsed,
                        stack: 'leave'
                    },
                    {
                        label: 'Over Leave',
                        data: overLeave,
                        backgroundColor: 'rgba(49, 54, 50, 0.60)',// black
                        hoverBackgroundColor: 'rgba(49, 54, 50, 1)',
                        stack: 'leave'
                    }
                ]
            },
            options: {
                interaction: {
                    intersect: false,
                    mode: 'index',
                },
                responsive: true,
                maintainAspectRatio: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Annual Leave Summary',
                        font: {
                            size: 20,
                            weight: 'bold'
                        }
                    },
                    subtitle: {
                        display: true,
                        text: ' ',
                    },
                    legend: {
                        display: true,
                        labels: {
                            usePointStyle: true,
                            generateLabels: function (chart) {
                                return [
                                    {
                                        text: 'Under Utilized',
                                        fillStyle: 'rgba(46, 202, 87, 0.60)',
                                        strokeStyle: 'rgba(46, 202, 87, 0.80)',
                                        lineWidth: 1,
                                        hidden: false,
                                        index: 0,
                                        description: 'Used fewer leaves than allotted',
                                        pointStyle: 'rectRounded',
                                    },
                                    {
                                        text: 'Fully Utilized',
                                        fillStyle: 'rgba(238, 49, 36, 0.60)',
                                        strokeStyle: 'rgba(238, 49, 36, 0.60)',
                                        lineWidth: 1,
                                        hidden: false,
                                        index: 1,
                                        description: 'Used all allotted leave',
                                        pointStyle: 'rectRounded',
                                    },
                                    {
                                        text: 'Exceeded',
                                        fillStyle: 'rgba(49, 54, 50, 0.60)',
                                        strokeStyle: 'rgba(49, 54, 50, 0.60)',
                                        lineWidth: 1,
                                        hidden: false,
                                        index: 2,
                                        description: 'Leave usage has exceeded the allotted leave',
                                        pointStyle: 'rectRounded',
                                    },
                                ];
                            }

                        },
                        onClick: null,
                            onHover: function (event, legendItem, legend) {
                            const tooltipEl = document.getElementById('legend-tooltip');
                            if (tooltipEl && legendItem) {
                                const canvasRect = legend.chart.canvas.getBoundingClientRect();

                                tooltipEl.innerText = legendItem.description || legendItem.text;
                                tooltipEl.style.display = 'block';

                                // Calculate correct position: canvas position on page + mouse offset in canvas
                                const x = canvasRect.left + event.native.offsetX + window.scrollX;
                                const y = canvasRect.top + event.native.offsetY + window.scrollY;

                                tooltipEl.style.left = x + 10 + 'px';
                                tooltipEl.style.top = y + 10 + 'px';
                            }
                        },

                        onLeave: function (event, legendItem, legend) {
                            const tooltipEl = document.getElementById('legend-tooltip');
                            if (tooltipEl) {
                                tooltipEl.style.display = 'none';
                            }
                        }
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false
                    }
                },
                scales: {
                    y: {
                        stacked: true,
                        beginAtZero: true,
                        suggestedMax: 25,
                        title: {
                            display: true,
                            text: 'Days',
                            font: {
                                size: 15,
                                weight: 'bold'
                            }
                        }
                    },
                    x: {
                        stacked: true,
                        title: {
                            display: false,
                            text: 'Employee'
                        },
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
    }

    // Chart 5(hybrid work balance)=====================================================================================================================

    // Fetch and render Avg Work Hour chart
    function fetchAndRenderHybridWorkBalance() {

        const year = document.getElementById('year').value;
        const month = document.getElementById('month').value;

        $.ajax({
            url: `/AdminChart/MonitorHybridWorkBalance`,
            method: "GET",
            data: { year: year, month: month },
            success: function (data) {

                if (!data || data.length === 0) {
                    alert("No data found for selected year and month.");
                    return;
                }

                renderHybridWorkBalanceChart(data);
            },

            error: function (xhr, status, error) {
                console.error("Error fetching avg work hour chart data:", error);
                alert("Failed to load avg work hour chart.");
            }
        });
    }

    let HybridWorkBalanceCahrtContainer = null;

    function renderHybridWorkBalanceChart(chartData) {
        const ctx = document.getElementById('hybridWorkbalance').getContext('2d');

        if (HybridWorkBalanceCahrtContainer) {
            HybridWorkBalanceCahrtContainer.destroy();
        }

        const labels = chartData.map(item => item.employeeName);
        const wfhData = chartData.map(item => item.wfh_days);
        const wfoData = chartData.map(item => item.wfo_days);

        HybridWorkBalanceCahrtContainer = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'WFH Days', // 41,191,18 - greeen
                        data: wfhData,
                        backgroundColor: 'rgba(238, 49, 36, 0.6)', // red
                        hoverBackgroundColor: 'rgba(238, 49, 36, 0.8)',
                        borderWidth: 1
                    },
                    {
                        label: 'WFO Days',
                        data: wfoData,
                        backgroundColor: 'rgba(91, 194, 231,0.6)', // blue
                        hoverBackgroundColor: 'rgba(91, 194, 231,0.8)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                // indexAxis: 'y',
                interaction: {
                    intersect: false,
                    mode: 'index',
                },
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Hybrid Work Balance',
                        font: {
                            size: 20,
                            weight: 'bold'
                        }
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false
                    },
                    legend: {
                        display: true,
                            labels: {
                        usePointStyle: true,
                        generateLabels: function (chart) {
                            return [
                                {
                                    text: 'Work From Office',
                                    fillStyle: 'rgba(91, 194, 231,0.6)',
                                    strokeStyle: 'rgba(91, 194, 231,0.6)',
                                    lineWidth: 1,
                                    hidden: false,
                                    index: 0,
                                    description: 'Excellent punctuality: 90% or above attendance on time',
                                    pointStyle: 'rectRounded',
                                },
                                {
                                    text: 'Work From Home',
                                    fillStyle: 'rgba(238, 49, 36, 0.6)',
                                    strokeStyle: 'rgba(238, 49, 36, 0.6)',
                                    lineWidth: 1,
                                    hidden: false,
                                    index: 1,
                                    description: 'Acceptable punctuality: Between 80% and 90%',
                                    pointStyle: 'rectRounded',
                                },
                            ];
                        }

                    },
                    onClick: null,
                    }
                },
                scales: {
                    x: {
                        stacked: true,
                        beginAtZero: true,
                        max: 100,
                        title: {
                            display: false,
                            text: 'Employee'
                        },
                        grid: {
                            display: false
                        }
                    },
                    y: {
                        stacked: true,
                        ticks: {
                            autoSkip: false
                        },
                        title: {
                            display: true,
                            text: 'Days',
                            font: {
                                size: 15,
                                weight: 'bold'
                            }
                        }
                    }
                }
            }
        });
    }


</script>