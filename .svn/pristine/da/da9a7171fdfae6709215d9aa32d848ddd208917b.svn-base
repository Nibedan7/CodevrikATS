using System.Data;
using CdplATS.API.Repositories;
using CdplATS.Entity.Models;
using Microsoft.Data.SqlClient;

namespace CdplATS.API.Services
{
    public class EmployeeService
    {
        private readonly GenericRepository _genericRepository;

        public EmployeeService(GenericRepository genericRepository)
        {
            _genericRepository = genericRepository;
        }

        //get employee by id employee service
        public async Task<ApiResponse<IEnumerable<EmployeeEntity>>> GetEmployeeList(int Id, int? DepartmentId,int? ActiveStatus)
        {
            try
            {
                var parameters = new SqlParameter[]
               {
                    new SqlParameter("@Id", SqlDbType.Int) { Value = Id },
                    new SqlParameter("@DepartmentId", SqlDbType.Int) { Value = DepartmentId },
                    new SqlParameter("@ActiveStatus", SqlDbType.Int) { Value = ActiveStatus },
               };
                var employees = await _genericRepository.GetAllAsync<EmployeeEntity>("GetEmployeeList",parameters);
                return new ApiResponse<IEnumerable<EmployeeEntity>>(employees, "Employee retrieved successfully.", true);
            }
            catch (Exception ex)
            {
                return new ApiResponse<IEnumerable<EmployeeEntity>>(null, $"Error: {ex.Message}", false);
            }
        }


        public async Task<ApiResponse<EmployeeEntity>> GetEmployeeDetails(int Id, int? DepartmentId, int? ActiveStatus)
        {
            try
            {
                var parameters = new SqlParameter[]
               {
                    new SqlParameter("@Id", SqlDbType.Int) { Value = Id },
                    new SqlParameter("@DepartmentId", SqlDbType.Int) { Value = DepartmentId },
                    new SqlParameter("@ActiveStatus", SqlDbType.Int) { Value = ActiveStatus },
               };
                var employee = await _genericRepository.GetAsync<EmployeeEntity>("GetEmployeeList", parameters);
                return new ApiResponse<EmployeeEntity>(employee, "Employee retrieved successfully.", true);
            }
            catch (Exception ex)
            {
                return new ApiResponse<EmployeeEntity>(null, $"Error: {ex.Message}", false);
            }
        }




        //add edit employee service
        public async Task<ApiResponse<string>> AddEditEmployee(EmployeeEntity request)
            {
            try
            {
                var parameters = new SqlParameter[]
                {
                    new SqlParameter("@Id", SqlDbType.Int) { Value = request.Id },
                    new SqlParameter("@FirstName", SqlDbType.NVarChar) { Value = request.FirstName },
                    new SqlParameter("@LastName", SqlDbType.NVarChar) { Value = request.LastName },
                    new SqlParameter("@EmployeeCode", SqlDbType.Int) { Value = request.EmployeeCode },
                    new SqlParameter("@Email", SqlDbType.NVarChar) { Value = request.Email },
                    new SqlParameter("@DepartmentIds", SqlDbType.NVarChar) { Value = request.DepartmentIds},
                    new SqlParameter("@AccessCardNumber", SqlDbType.NVarChar) { Value = request.AccessCardNumber },
                    new SqlParameter("@BirthDate", SqlDbType.Date) { Value = request.BirthDate },
                    new SqlParameter("@HireDate", SqlDbType.Date) { Value = request.HireDate },
                    new SqlParameter("@ContactNumber1", SqlDbType.NVarChar) { Value = request.ContactNumber1 },
                    new SqlParameter("@Gender", SqlDbType.Char) { Value = request.Gender },
                    new SqlParameter("@CreatedBy", SqlDbType.Char) { Value = request.authCode },
                    new SqlParameter("@RoleId", SqlDbType.Int) {Value = request.RoleId },
                    new SqlParameter("@Reviewer1Code", SqlDbType.Int) {Value = request.Reviewer1 },
                    new SqlParameter("@Reviewer2Code", SqlDbType.Int) {Value = request.Reviewer2 },
                };

                var result = await _genericRepository.GetAsync<dynamic>("AddEditEmployee", parameters);

                if (result.IsSuccess == -1)
                {
                    return new ApiResponse<string> { Success = false, Message = "EmployeeCode already exists!"};
                }
                else if (result.IsSuccess == -2)
                {
                    return new ApiResponse<string> { Success = false, Message = "Email already exists!" };
                }
                else if (result.IsSuccess == -3)
                {
                    return new ApiResponse<string> { Success = false, Message = "Contact Number already exists!" };
                }
                else if (result.IsSuccess == -4)
                {
                    return new ApiResponse<string> { Success = false, Message = "AccessCard Number already exists!" };
                }
                else if (result.IsSuccess == 1 && request.Id == 0)
                {
                    return new ApiResponse<string> { Success = true, Message = "Employee created successfully." };
                }
                else if (result.IsSuccess == 1 && request.Id != 0)
                {
                    return new ApiResponse<string> { Success = true, Message = "Employee updated successfully." };
                }
                else
                {
                    return new ApiResponse<string> { Success = false, Message = "Failed to insert/update employee data." };
                }
            }
            catch (Exception ex)
            {
                return new ApiResponse<string> { Success = false, Message = $"Error inserting/updating employee data: {ex.Message}" };
            }
        }

        //delete employee service
        public async Task<ApiResponse<bool>> DeleteEmployee(int Id,int status)
        {
            try
            {
                var parameters = new SqlParameter[]
                {
                    new SqlParameter("@Id", Id),
                    new SqlParameter("@Status", status)

                };

               var result = await _genericRepository.ExecuteAsync("DeleteEmployee", parameters);

                if (result < 0 && status == 2)
                {
                    return new ApiResponse<bool>(true, "Employee Deleted successfully.", true);
                }
                else if (result < 0 && status == 1)
                {
                    return new ApiResponse<bool>(true, "Employee Revoked successfully.", true);
                }

                else
                {
                    return new ApiResponse<bool>(true,"Failed to Delete/Revoke Employee.",true);
                }
            
            }
            catch (Exception ex)
            {
                return new ApiResponse<bool>(false, $"Error: {ex.Message}", false);
            }
        }
       
        //get employee assesssment by employee code service
        public async Task<ApiResponse<EmployeeAssessmentEntity>> GetEmpAssByEmpCodeAsync(int EmpCode)
        {
            try
            {
                var parameters = new SqlParameter[]
               {
                    new SqlParameter("@empCode", SqlDbType.Int) { Value = EmpCode },
               };
                var employeeAssessment = await _genericRepository.GetAsync<EmployeeAssessmentEntity>("GetEmpAssbyEmpcode", parameters);
                return new ApiResponse<EmployeeAssessmentEntity>(employeeAssessment, "Employee retrieved successfully.", true);
            }
            catch (Exception ex)
            {
                return new ApiResponse<EmployeeAssessmentEntity>(null, $"Error: {ex.Message}", false);
            }
        }

    }
}
