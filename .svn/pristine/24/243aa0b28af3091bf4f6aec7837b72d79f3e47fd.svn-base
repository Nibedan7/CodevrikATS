using CdplATS.API.Services;
using CdplATS.Entity.Models;


using Microsoft.AspNetCore.Http;

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;

using Microsoft.AspNetCore.Mvc;

namespace CdplATS.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class HolidayApiController : ControllerBase
    {
        private readonly HolidayService _holidayService;
        public HolidayApiController(HolidayService holidayService)
        {  
            _holidayService = holidayService;
        }

        /// <summary>
        /// Get one holiday 
        /// </summary>
        [HttpGet("GetHolidayDetails")]
        public async Task<IActionResult> GetHolidayDetails(int Id , int Year)
        {

            var response = await _holidayService.GetHolidayDetails(Id, Year);

            
            return Ok(response);

        }

        /// <summary>
        /// Get all holidays
        /// </summary>
        [HttpGet("GetHolidayList")]
        public async Task<IActionResult> GetHolidayList(int? Year = null)
        {

            var response = await _holidayService.GetHolidayList(Year);

            if (response == null || !response.Success)
            {
                return StatusCode(500, response?.Message ?? "Error occurred while Loading holiday.");
            }
            return Ok(response);

        }


        /// <summary>
        /// Api for Add and Edit Holiday
        /// </summary>
        [HttpPost("AddEditHoliday")]
        public async Task<IActionResult> AddEditHoliday([FromBody] HoliDayEntity holiday)
        {
            if (holiday == null)
            {
                return BadRequest("Invalid holiday data.");
            }

            var response = await _holidayService.AddEditHoliday(holiday);

            return Ok(response);
        }

        /// <summary>
        /// Api for Delete Holiday
        /// </summary>
        

        [HttpDelete("DeleteHoliday/{Id}")]
        public async Task<IActionResult>DeleteHoliday(int Id)
        {
            if(Id <= 0)
            {
                return BadRequest(new { message = "Invalid holiday id" });
            }
            var response = await _holidayService.DeleteHoliday(Id);
            if (!response.Success)
            {
                return BadRequest(response);
            }
            return Ok(response);

        }

      
    }
}
